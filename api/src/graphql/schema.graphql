type User {
  id: ID!
  email: String!
  name: String
  avatar: String
  createdAt: String!
  updatedAt: String!
  googleId: String
  facebookId: String
  chats: [Chat!]!
  payments: [Payment!]!
}

type Chat {
  id: ID!
  title: String
  createdAt: String!
  updatedAt: String!
  user: User!
  messages: [Message!]!
}

type Message {
  id: ID!
  content: String!
  role: UserRole!
  createdAt: String!
  updatedAt: String!
  chat: Chat!
  mediaLinks: [MediaLink!]!
  parentMessage: Message
  childMessages: [Message!]!
}

type MediaLink {
  id: ID!
  url: String!
  createdAt: String!
  updatedAt: String!
}

type Query {
  users: [User!]!
  user(id: ID!): User
  chats(userId: ID!): [Chat!]!
  chatone(id: ID!): Chat
  messages(chatId: ID!): [Message!]!
  message(id: ID!): Message
}

type Mutation {
  createUser(email: String!, name: String, avatar: String): User!
  createChat(title: String, userId: String!): Chat!
  updateChat(id: ID!, title: String): Chat!
  deleteChat(id: ID!): Chat!
  createMessage(
    content: String!
    role: UserRole!
    chatId: String!
    parentMessageId: ID
    mediaLinks: [MediaLinkInput!]
  ): Message!
  updateMessage(
    id: ID!
    content: String
    role: UserRole
  ): Message!
  deleteMessage(id: ID!): Message!
}

input MediaLinkInput {
  url: String!
}

enum UserRole {
  USER
  SYSTEM
}
